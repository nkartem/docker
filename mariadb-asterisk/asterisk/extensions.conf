#include <from_pstn.conf>
#include <chatbot.conf>

[general]

static=yes
writeprotect=yes
autofallthrough=yes
clearglobalvars=no
priorityjumping=yes

[globals]

;=========================== Variables for file name ==========================================

LimCall_AC = 5  ; (3 attempts inside a call) x (3 calls) = 9 attempts
LimCall_QC = 4  ; (2 attempts inside first call) + (2 attempts via 1 day or later) = 4 attempts

LimAtt_AC = 3   ; 3 attempts inside a call only
LimAtt_QC = 3   ; 3 attempts inside a call only

HC = 16; Default HangupCause




PROVIDER=local_call
QSandNquest=null
CONSENT = 0; By Default without consent before "Press 1..."

RraDir   =/home/UIS;                    the main directory for RRA System
;QuestDir =/home/UIS/Quests;            sound files of Interview Questions (Q_0018_12_Spa.wav)
QuestDir =/home/UIS/Questions;
IntroDir =/home/UIS/Introductions;      sound files of IVR
WavDir   =/home/UIS/tmp/Wav;            recorded sound files of the interviews
Qsts     =/home/UIS/Questions;          MasterEditor sound files of IVR
Intrws   =/home/UIS/Interviews;         MasterEditorInterviews



;===============================================================================================

[incoming]
exten => +14153758046,1,            Wait(1)
exten => +14153758046,n,            Set(from_host=${CHANNEL(from)})
exten => +14153758046,n,            Verbose(------- ${CALLERID(num)}-------!!!${CHANNEL(peerip)}---${CUT(from_host,@,2)}---!!! ------- is Calling -------)
exten => +14153758046,n,                        Verbose()

exten => +14153758046,n,                GotoIf($["${CUT(from_host,@,2)}" = "zt.plivo.com:5060"]?:hangup)

exten => +14153758046,n,                        Verbose(There is a special call for English Interview)
exten => +14153758046,n,                        Set(from=${EXTEN})
exten => +14153758046,n,                        Set(LANG=Eng); New version
exten => +14153758046,n,                        Goto(internal,888,1); New version
exten => +14153758046,n(hangup),    Hangup(21)

exten => _X.,1,                                     Hangup()

[sub-file_exist_check]
exten=>s,1,            Set(Lap=0)
exten=>s,n(check_f),   Wait(1)
exten=>s,n,            Set(Lap=$[${Lap}+1])
exten=>s,n,            SET(INFO=${STAT(e,${MSSG})}); reading of accessID message
exten=>s,n,            Verbose(accessID file exist = ${INFO})
exten=>s,n,            GotoIf($[${INFO} = 1]?return:nxt)
exten=>s,n(return),    Return
exten=>s,n(nxt),       GotoIf($[${Lap} = 10]?no_f:check_f)
exten=>s,n(no_f),      Set(HC=127); Internetworking, unspecified
exten=>s,n,            Verbose(          The access message callNumber=${COUNT}  callerID=${USER} was not processed)
exten=>s,n,            Goto(sub-post-interwiev,s,tech_prob)

exten=>ping,1,         Wait(1)
exten=>ping,n,         SET(INFO=${STAT(e,${MSSG})}); reading of accessID message
exten=>ping,n,         Verbose(accessID file exist = ${INFO})
exten=>ping,n,         GotoIf($[${INFO} = 1]?return:no_f)
exten=>ping,n(return), Return
exten=>ping,n(no_f),   Set(HC=42);
exten=>ping,n,         Goto(sub-hangup,s,hangup)


[sub-pre-answer]

exten=>s,1,            Verbose(sub-pre-answer)

;exten=>s,n,            Set(NodeID=${SHELL(awk '$1 ~ /ownNumber/ {printf $2}'  /home/UIS/etc/node.conf)})
exten=>s,n,            Set(NodeID=${SHELL(awk  -F" " '/ownNumber/ {printf $2}' /home/UIS/etc/node.conf)})
exten=>s,n,            Verbose(    NodeID = ${NodeID}  )


exten=>s,n,            Set(CIL=${LEN(${CALLERID(num)})})
exten=>s,n,            Verbose( CallerID Lenth = ${CIL} )
exten=>s,n,            GotoIf($[${CIL} >= 25]?:contC)
exten=>s,n,            Set(CALLERID(num)=${CALLERID(num):0:25})
exten=>s,n,            Set(CIL=${LEN(${CALLERID(num)})})
exten=>s,n,            Verbose( CallerID Cuted to Length = ${CIL} )



;=====================StandaloneServer(default)=============================================
exten=>s,n(contC),     Set(COUNT=${DB(control/count)})
exten=>s,n,            GotoIf($[${ISNULL(${COUNT})}]?:cont1); if the record exists, then to cont1
exten=>s,n,            Set(COUNT=1)
exten=>s,n,            Set(DB(control/count)=${COUNT})
exten=>s,n,            Goto(cont2)

exten=>s,n(cont1),     Set(COUNT=$[${COUNT}+1])
exten=>s,n,            GotoIf($[${COUNT} = 99999]?:cont2)
exten=>s,n,            Set(COUNT=1)


;=====================MASTER1=============================================
;exten=>s,n(contC),     Set(COUNT=${DB(control/count)})
;exten=>s,n,            GotoIf($[${ISNULL(${COUNT})}]?:cont1); if the record exists, then to cont1
;exten=>s,n,            Set(COUNT=1)
;exten=>s,n,            Set(DB(control/count)=${COUNT})
;exten=>s,n,            Goto(cont2)

;exten=>s,n(cont1),     Set(COUNT=$[${COUNT}+1])
;exten=>s,n,            GotoIf($[${COUNT} = 49999]?:cont2)
;exten=>s,n,            Set(COUNT=1)

;=====================MASTER2=============================================
;exten=>s,n(contC),     Set(COUNT=${DB(control/count)})
;exten=>s,n,            GotoIf($[${ISNULL(${COUNT})}]?:cont1); if the record exists, then to cont1
;exten=>s,n,            Set(COUNT=50000)
;exten=>s,n,            Set(DB(control/count)=${COUNT})
;exten=>s,n,            Goto(cont2)

;exten=>s,n(cont1),     Set(COUNT=$[${COUNT}+1])
;exten=>s,n,            GotoIf($[${COUNT} = 99999]?:cont2)
;exten=>s,n,            Set(COUNT=50000)


exten=>s,n(cont2),     Set(DB(control/count)=${COUNT})

;------------ MS: There is a call: send message "call" --------------------------


exten=>s,n(clrID),     Set(USER=${CALLERID(num)})
exten=>s,n,            Set(DES=${COUNT}_${USER})
;-------------------PING FUNCTION----------------------------------------
        ;exten=>s,n,            System(echo > ${RraDir}/tmp/Input_Sync/ping_${DES})
        ;exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/ping_${DES})
        ;exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/ping_${DES} ${RraDir}/tmp/Input)

        ;exten=>s,n,            Set(MSSG=${RraDir}/tmp/Output/ping_${DES})
        ;exten=>s,n,            Gosub(sub-file_exist_check,ping,1)
        ;exten=>s,n,            System(rm -f ${MSSG})

exten=>s,n,            Set(CHANNEL(hangup_handler_push)=handler,s,1)

exten=>s,n,            Verbose(------------------------------- N E W  C A L L ---------------------------------------)
exten=>s,n,            Verbose(          There is a call : callNumber=${COUNT}   callerID=${USER})

exten=>s,n,            Set(msg_time= \n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n)
exten=>s,n,            Set(JSON_call= "{\n\\"dial_number\\": \\"${from}\\",\n\\"provider\\": \\"${PROVIDER}\\",${msg_time}}")
exten=>s,n,            System(echo -e ${JSON_call}  > ${RraDir}/tmp/Input_Sync/call_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/call_${DES}.txt)

exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/call_${DES}.txt ${RraDir}/tmp/Input)

exten=>s,n,            Verbose(          Sent Call mes   : callNumber=${COUNT}   callerID=${USER}   Lang=${LANG})


;------------ BL: Checking of Access Code counter ------------------------------
exten=>s,n,            Set(SYS_COUNT=${COUNT})
exten=>s,n,            Set(clrID=${CALLERID(num)})
exten=>s,n,            Set(COUNTAC=${DB(countAC/${clrID})})
exten=>s,n,            GotoIf($[${ISNULL(${COUNTAC})}]?cont3)
exten=>s,n,            Verbose(BL: COUNTAC=${COUNTAC})
exten=>s,n,            GotoIf(${DB_EXISTS(whitelist/${clrID})}?cont3)
exten=>s,n,            GotoIf($[${COUNTAC} = ${LimCall_AC}]?:cont3) ; LimCall_AC is defined in [global] contex



;------------ BL: This callerID is in Black List ------------------------------

exten=>s,n,            Verbose(BL: callerID = ${clrID} on Access Code is in Black List)
exten=>s,n,            Hangup(17)


;------------ BL: Checking of Quality Control couter -------------------------

exten=>s,n(cont3),     Set(COUNTQC=${DB(countQC/${clrID})})
exten=>s,n,            GotoIf($[${ISNULL(${COUNTQC})}]?cont4)
exten=>s,n,            Verbose(BL: COUNTQC=${COUNTQC})
exten=>s,n,            GotoIf($[${COUNTQC}>=${LimCall_QC}]?:cont4) ; LimCall_QC is defined in [global] contex
exten=>s,n,            Verbose(BL: callerID=${clrID} on Quality Control is in Black List)
exten=>s,n,            GotoIf(${DB_EXISTS(whitelist/${clrID})}?:cont_)  ; WhiteList, added on Jim's request 14.01.2019
exten=>s,n,            Verbose(------- ${clrID} is WhiteListed -------)
exten=>s,n,            Goto(cont4)
exten=>s,n(cont_),     Hangup(17)


;------------ MS: There is a call: send message "call" --------------------------

exten=>s,n(cont4),     Wait(1)
exten=>s,n,            Return



[sub-answer]

;;Asterisk picks up the phone and makes a AC request. Send AC for validation to CallViewer.
;;If the wrong AC is entered three times, then hang up

;------------ MS: Send message "answer" -----------------------------------------
exten=>s,1,            Answer
exten=>s,n,            Set(FULL_AUDIO=${WavDir}/FullCallRecord/${NodeID}_${DES}_${from}_${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
exten=>s,n,            MixMonitor(${FULL_AUDIO}.wav)

exten=>s,n,            Wait(2)

exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")
exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/answer_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/answer_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/answer_${DES}.txt ${RraDir}/tmp/Input)

exten=>s,n,            Verbose(          Sent Answer mes : callNumber=${COUNT}   callerID=${USER})

exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_1-1_${LANG}_${SPEAKER}); You have reached...
exten=>s,n,            Set(ivr_type=\\"normal\\")
;------------ MS: Enter Access Code ---------------------------------------------

;exten=>s,n(rep_access),GotoIf($["${FROM_CC}" = "1"]?cc_dtmf)

exten=>s,n(rep_access),Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_1-2_${LANG}_${SPEAKER}); Please enter your access code ...
exten=>s,n,            Verbose(      Entering Access Code : attempt#${ATT_ACCESS}        callNumber=${COUNT}        callerID=${USER})
exten=>s,n,            Read(DTMF,,9,,,20)
exten=>s,n,            Verbose(          DTMF Access Code = ${DTMF}          )

exten=>s,n,            Gosub(sub-demo-interview,s,1)

;------------ BL: Draft Checking of the Access Code ------------------------------

exten=>s,n,            GotoIf($[${ISNULL(${DTMF})}]?null:n_null)

;------------ MS: Send message "accessID"
exten=>s,n(null),      Set(AC=null)
exten=>s,n,            Goto(ACjson)

exten=>s,n(n_null),    Set(AC= \\"${DTMF}\\")
exten=>s,n,            Goto(ACjson)

exten=>s,n(ACjson),    Set(msg_time= \n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n)
exten=>s,n,            Set(JSON_accessID= "{\n\\"auth_by_ac\\": {\n\\"access_code\\": ${AC}\n},${msg_time}\n}")
exten=>s,n,            System(echo -e ${JSON_accessID}  > ${RraDir}/tmp/Input_Sync/accessID_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/accessID_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/accessID_${DES}.txt ${RraDir}/tmp/Input)


exten=>s,n,            Verbose(        Sent "accessID" mes : Access Code = ${DTMF}   callNumber=${COUNT}  callerID=${USER})
exten=>s,n,            Wait(2)


;------------ MS: Read back message "accessID" and analyze ------------------------
;parse callviewer answer to variables

exten=>s,n,            SET(INFO=${STAT(e,${RraDir}/tmp/Output/accessID_${DES}.txt)}); reading of accessID message
exten=>s,n,            Verbose(accessID file exist = ${INFO})

exten=>s,n,            Set(MSSG=${RraDir}/tmp/Output/accessID_${DES}.txt)

exten=>s,n,            Gosub(sub-file_exist_check,s,1)

exten=>s,n,            SET(INFO=${FILE(${RraDir}/tmp/Output/accessID_${DES}.txt,0,34)}); reading of accessID message
exten=>s,n,            Verbose(INFO=${INFO})
exten=>s,n,            Set(ACCESS=${CUT(INFO,-,1)});                    OK/No
exten=>s,n,            Set(NUMQUEST=${CUT(INFO,-,2)});                  from 6 to 30
exten=>s,n,            Set(INTV_LANG=${CUT(INFO,-,3)});                 Eng/Spa/Pas/Dar/Far/Tag
exten=>s,n,            Set(INT_FILE=${IntDir}/${CUT(INFO,-,4)});        full path to file
exten=>s,n,            Set(INT_FNAME=${CUT(INFO,-,4)});                 file of interview:  I_0253_10_Eng.txt
exten=>s,n,            Set(INT_SPEAKER=${CUT(INT_FNAME,_,5)})
exten=>s,n,            Set(NAMENUM=${CUT(INT_FNAME,_,3)})
exten=>s,n,            Verbose( INT_SPEAKER=${INT_SPEAKER} NAMENUM=${NAMENUM} )

exten=>s,n,            Verbose(ACCESS=${ACCESS}  NUMQUEST=${NUMQUEST} LANG=${INTV_LANG})
exten=>s,n,            Verbose(Interview File = ${INT_FNAME})

exten=>s,n,            System(rm -f ${MSSG})

exten=>s,n,            GotoIf($[${ACCESS} = OK]?AC_OK); to deleting AC BL information
exten=>s,n,            GotoIf($[${ACCESS} = NO]?AC_NO)
exten=>s,n,            Set(HC=127); Internetworking, unspecified

exten=>s,n,            Verbose(          The access message callNumber=${COUNT}  callerID=${USER} was not processed)
exten=>s,n,            Goto(sub-post-interwiev,s,tech_prob)



;------------ BL: Delete countAC information ---------------------------------------

exten=>s,n(AC_OK),     Set(COUNTAC=${DB(countAC/${clrID})})

exten=>s,n,            GotoIf($[${ISNULL(${COUNTAC})}]?inviteIntv)
exten=>s,n,            Verbose(BL:    Delete DB:countAC/${clrID} COUNTAC=${COUNTAC})
exten=>s,n,            NoOp(${DB_DELETE(countAC/${clrID})})


;------------ MS: Reading of the interview file content --------------------------
exten => s,n(inviteIntv), SET(INT_ID=${CUT(INT_FNAME,_,2)});                    interviewID (0253 for example)
exten => s,n,            Verbose(InterviewID=${INT_ID})
exten => s,n,            SET(ALLQ=${FILE(${Intrws}${INT_FILE}.din)});  list of questionIDs as one string
exten => s,n,            Verbose(Text = ${ALLQ})


exten=>s,n,Return



;------------ BL: Result of AC checking ---------------------------------------------

exten=>s,n(AC_NO),     Verbose(WRONG AC)

exten=>s,n(err_access),GotoIf($[${ATT_ACCESS} = ${LimAtt_AC}]?end_access); count failed calls
exten=>s,n,            Set(ATT_ACCESS=$[${ATT_ACCESS} + 1])
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_10_${LANG}_${SPEAKER}); The access code is incorrect
exten=>s,n,            Goto(rep_access)


;------------ BL: Count failed AC calls --------------------------------------------

exten=>s,n(end_access),Verbose(BL:   Three failed attempts : break processing  callNumber=${COUNT}  callerID=${USER})
exten=>s,n,            Set(COUNTAC=${DB(countAC/${clrID})})


exten=>s,n,            GotoIf($[${ISNULL(${COUNTAC})}]?empty:exist); if the record exists, then to cont9

exten=>s,n(empty),     Set(DB(countAC/${clrID})=1)
exten=>s,n,            Goto(phr_11)

exten=>s,n(exist),     Set(COUNTAC=$[${COUNTAC}+1])
exten=>s,n,            Set(DB(countAC/${clrID})=${COUNTAC})
exten=>s,n,            Goto(phr_11)

exten=>s,n(phr_11),    Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_11_${LANG}_${SPEAKER}); You have entered the incorrect code three times
exten=>s,n,            Verbose(BL:   callerID = ${clrID}    countAC = ${DB(countAC/${clrID})})

exten=>s,n,            GotoIf($["${COUNTAC}"="${LimCall_AC}"]?:hangup)


;------------ BL: Send message "toACBlackList" -----------------------------------------


exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")

exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/toACBlackList_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/toACBlackList_${DES}.txt)

exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/toACBlackList_${DES}.txt ${RraDir}/tmp/Input)

exten=>s,n,            Verbose(BL:   The callerID=${clrID} is placed to AC Black List)
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_12_${LANG}_${SPEAKER}); more then 3 times

exten=>s,n(hangup),    Set(HC=16);
exten=>s,n,            Goto(sub-hangup,s,hangup)

[sub-inviteIntv]

;Invitation to press 1 when you are ready to start the interview.
;If 3 times nothing is pressed or different numbers except 1 then hang up


;------------ MS: Invite to interview after pressing key 1 ------------------------------
exten=>s,1,                             Verbose(sub-inviteIntv)

exten=>s,n(inviteIntv),                 Set(C_DELAY=0); counter when no key was pressed for 30 sec
exten=>s,n,                             Set(C_NO_1=0);  counter when it was pressed other key, no key 1

exten=>s,n(rep_invite),                 Set(from=${EXTEN})

exten=>s,n,                             Background(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_9_${LANG}_${SPEAKER}); Your access code was accepted

exten=>s,n,                             GotoIf($[${CONSENT}=0]?press1)
exten=>s,n,                             GotoIf($[${CONSENT}=1]?consent1)
exten=>s,n,                             GotoIf($[${CONSENT}=2]?consent2:press1)


exten=>s,n(consent1),                   Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_24_${LANG}_${SPEAKER}); By continuing with this interview, you are providing consent for your responses to be recorded, analyzed and evaluated
exten=>s,n,                             Goto(press1)

exten=>s,n(consent2),                   Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_25_${LANG}_${SPEAKER}); This questionnaire is part of a company-wide audit to collect security-related information....
exten=>s,n,                             Goto(press1)

exten=>s,n(press1),                     Background(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_2_${LANG}_${SPEAKER});
exten=>s,n,                             WaitExten(30); ->+ Oct 03, 2016

exten=>s,n,                             Set(C_DELAY=$[${C_DELAY}+1])
exten=>s,n,                             GotoIf($["${C_DELAY}" < "2"]?rep_invite);  -> Oct 03, 2016
exten=>s,n(hangup),                     Set(HC=90); Destination address missing, and direct call not subscribed
exten=>s,n,                             Goto(sub-hangup,s,hangup)

exten=>1,1,                             Verbose(It was pressed key 1)

exten=>1,n,                             Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")
exten=>1,n,                             System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/intvwInitiated_${DES}.txt)
exten=>1,n,                             System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/intvwInitiated_${DES}.txt)
exten=>1,n,                             System(mv ${RraDir}/tmp/Input_Sync/intvwInitiated_${DES}.txt ${RraDir}/tmp/Input)

exten=>1,n,                             Return
;------------ The other key was pressed (not 1) -----------------

exten=>i,1,                             Verbose(It was pressed key no 1)
exten=>i,n(contB),                      Set(C_NO_1=$[${C_NO_1}+1])
exten=>i,n,                             Verbose(Other key : attempt #${C_NO_1}. It was pressed other key or no pressing)
exten=>i,n,                             GotoIf($["${C_NO_1}"<"3"]?s,rep_invite:s,hangup)

;----------- MS: Time out: no key was pressed -----------------

exten=>t,1,                             Verbose(No key was pressed for defined time )
exten=>t,n,                             Goto(i,contB)




[sub-interview-cc]
;Welcome briefing before the interview and interview.
;If REC = 0 - without interview recording.. If REC = 1 - with recording of the interview.
;------------ MS: Send message "beginInterview" and record the interview ----------------
exten=>s,1,             Verbose(sub-interview)
exten=>s,n,             Set(ATTEMPT=1)
exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_3-1_short_${LANG}_${SPEAKER}) ; new
exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_3-3_${LANG}_${SPEAKER})
exten=>s,n,             Goto(ft)
exten=>s,n(st),         Wait(1)
exten=>s,n,             Set(ATTEMPT=2)
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_6_short_${LANG}_${SPEAKER}); You will be asked a second time....short IVR
exten=>s,n(ft),         Wait(1)
exten=>s,n(repeat),     Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_4_${LANG}_${SPEAKER}); The questions are about to begin

exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")
exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/beginQuestSet_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/beginQuestSet_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/beginQuestSet_${DES}.txt ${RraDir}/tmp/Input)


exten=>s,n,             Wait(2)

;------------ MS: Cycle of recording answers -------------------------------------
exten=>s,n,             SET(IN=0);                                                              pointer of the cycle
exten=>s,n,             SET(DURATION=0)
exten=>s,n(ct),         SET(NS=$[${IN}+1]);                                             answer number (beginning from 1)
exten=>s,n,             SET(QSandNquest={\n\\"_seq\\":${ATTEMPT},\n\\"n_quest\\":${NS}})
exten=>s,n,             Verbose(IN=${IN}  NS=${NS})

exten=>s,n,             Verbose(Play question ${NS})
exten=>s,n,             SET(FQ=${CUT(ALLQ,-,${NS})});                           questionID file
exten=>s,n,             Verbose(Play question Q_${FQ}_${INTV_LANG}_${INT_SPEAKER}.wav)
exten=>s,n,             Playback(${Qsts}/Q_${FQ:0:4}_${INTV_LANG}_${INT_SPEAKER})

exten=>s,n,             GotoIf($["${REC}"="0"]?:cntn)
exten=>s,n,             Wait(5.0)
exten=>s,n,             Goto(check)

exten=>s,n(cntn),       SET(SIGN=${FQ:-1});                                         special sign: N/R/L - neutral, relevant, long question
exten=>s,n,             GotoIf($[${SIGN}=L]?:s3)
exten=>s,n,             Set(DUR=10.0);                                                  duration of record for answer Long question (Your name?)
exten=>s,n,             Goto(rec5)
exten=>s,n(s3),         Set(DUR=5.0);                                                       duration for usual answer
exten=>s,n(rec5),       GotoIf($[${IN}=0]?:ju1)
exten=>s,n,             Set(A_FILE=${WavDir}/A_${INT_FNAME})
exten=>s,n,             Verbose(Answer file = ${A_FILE})
exten=>s,n,             Verbose(Current time = ${STRFTIME(${EPOCH},America/New_York,%d%m%Y_%H%M%S)})

;---------------- Start of intervew ---------------------------
exten=>s,n,             Set(FILE_NAME=${WavDir}/A_${DES}_${DTMF}_${NAMENUM}_${INTV_LANG}_${STRFTIME(${EPOCH},America/New_York,%d%m%Y_%H%M%S)})
exten=>s,n,             Monitor(wav,${FILE_NAME})
exten=>s,n,             Goto(ju2)
exten=>s,n(ju1),        Verbose(Current time = ${STRFTIME(${EPOCH},America/New_York,%d%m%Y_%H%M%S)})
exten=>s,n,             UnPauseMonitor()
exten=>s,n(ju2),        Wait(${DUR})
exten=>s,n,             PauseMonitor()
exten=>s,n,             SET(DURATION=$[${DURATION}+${DUR}])
exten=>s,n,             Verbose(Current Duration = ${DURATION})
exten=>s,n(check),  SET(IN=$[${IN}+1])
exten=>s,n,             GotoIf($[${IN}=${NUMQUEST}]?:ct);               check a condition of cycle end
exten=>s,n,             GotoIf($["${REC}"="0"]?return)
;----------------- Finish of interview --------------------------
exten=>s,n,             StopMonitor()
exten=>s,n,             Wait(1); for closing the file
exten=>s,n,             System(chmod -c 0777 ${FILE_NAME}*.wav)
exten=>s,n,             System(rm -f ${FILE_NAME}-out.wav)
exten=>s,n,             Verbose(The interview is completed : callNumber=${COUNT}   callerID=${USER})
exten=>s,n(return),     Return



[sub-post-interwiev]
;Sending interview information file to CallViewer to check the quality of recorded responses in wav audio file.
;If the quality is bad, then go to 3-rd and last round of interview.


;------------ MS: Send message "interview" --------------------------------------

exten=>s,1(start),     Verbose(sub-post-interwiev)

exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")
exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/endQuestSet_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/endQuestSet_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/endQuestSet_${DES}.txt ${RraDir}/tmp/Input)

exten=>s,n,            Verbose(   Sent "interview" message : callNumber=${COUNT}   callerID=${USER})
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_13_${LANG}_${SPEAKER}); Please wait while the system processes...
exten=>s,n,            Wait(2)


;------------ MS: Analysis of quality control -----------------------------------

exten=>s,n,            Set(MSSG=${RraDir}/tmp/Output/endQuestSet_${DES}.txt)
exten=>s,n,            Gosub(sub-file_exist_check,s,1)

exten=>s,n,            Set(QUAL=${FILE(${RraDir}/tmp/Output/endQuestSet_${DES}.txt)})
exten=>s,n,            Verbose(      Result of QuaControl : Quality = ${QUAL}     callNumber=${COUNT}        callerID=${USER})
exten=>s,n,            GotoIf($[${QUAL} = OK]?QC_OK); to deleting of BL information

exten=>s,n,            GotoIf($[${ATTEMPT} >= 3]?hangup)

exten=>s,n,            GotoIf($[${QUAL}=IR1]?ir1)       ; The system was not able to hear all of your responses
exten=>s,n,            GotoIf($[${QUAL}=IR2]?ir2)       ; Your responses were too loud
exten=>s,n,            GotoIf($[${QUAL}=IR3]?ir3)       ; The system did not hear all of your responses
exten=>s,n,            GotoIf($[${QUAL}=IR4]?ir4)       ; You are answering the question too quickly
exten=>s,n,            GotoIf($[${QUAL}=IR5]?ir5)       ; You did not answer all the questions immediately after the tone
exten=>s,n,            GotoIf($[${QUAL}=IR6]?ir6)       ; The system detected unknown background sounds during the interview
exten=>s,n,            GotoIf($[${QUAL}=IR7]?ir7)       ; The system detected unknown sounds when you responded yes or no.

exten=>s,n,            Set(HC=127); Internetworking, unspecified

exten=>s,n,            Verbose(          The interview callNumber=${COUNT}  callerID=${USER} was not checked)

exten=>s,n(tech_prob), GotoIf($[$[${LANG}=Eng] | $[${LANG}=Spa]]?phrase_26:phrase_15)

exten=>s,n(phrase_26), Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_26_${LANG}_${SPEAKER}); The system requires additional technical approval to conduct this interview.  Please contact your interview administrator or manager to advise them you received this message.
exten=>s,n,            Goto(sub-hangup,s,hangup)

exten=>s,n(phrase_15), Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_15_${LANG}_${SPEAKER}); There is a technical problem

exten=>s,n,            Goto(sub-hangup,s,hangup)
exten=>s,n(hangup),    Goto(sub-hangup,s,ending1)


;------------: Play audio recomendations --------------------------------------------------------

exten=>s,n(ir1),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-1_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

exten=>s,n(ir2),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-2_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

exten=>s,n(ir3),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-3_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

exten=>s,n(ir4),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-4_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

exten=>s,n(ir5),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-5_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

exten=>s,n(ir6),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-6_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

exten=>s,n(ir7),       Playback(${IntroDir}/${LANG}/${SPEAKER}/IR-7_${LANG}_${SPEAKER});
exten=>s,n,            Wait(1)
exten=>s,n,            Goto(repeat1)

;------------ BL: Quality Control --------------------------------------------------------

exten=>s,n(repeat1),   GotoIf($["${ATTEMPT}" = "1"]?ending)
exten=>s,n,            GotoIf($[${ATTEMPT} = ${LimAtt_QC}]?failed_QC)
exten=>s,n,            Set(ATTEMPT=$[${ATTEMPT} + 1])
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_7_${LANG}_${SPEAKER}); the final attempt of interview
exten=>s,n,            Gosub(sub-interview-cc,s,repeat)
exten=>s,n,            GotoIf($["${ATTEMPT}" > "0"]?start)

;------------ BL: Count failed call for QC -----------------------------------------------

exten=>s,n(failed_QC), Verbose(BL:   Two failed Attempts of Quality Control - failed call)

exten=>s,n(rep_begQC), Set(COUNTQC=${DB(countQC/${clrID})})
exten=>s,n,            GotoIf($[${ISNULL(${COUNTQC})}]?:cont6)
exten=>s,n,            Verbose(BL:   Create new countQC record for callerID=${clrID})
exten=>s,n,            Set(DB(countQC/${clrID})=1)
exten=>s,n,            Verbose(BL:   DB -> countQC/${clrID} = ${DB(countQC/${clrID})})
exten=>s,n,            Goto(hangup)


exten=>s,n(cont6),     Verbose()
exten=>s,n,            Set(COUNTQC=$[${COUNTQC} + 1])
exten=>s,n,            Verbose(BL:   COUNTQC = ${COUNTQC})
exten=>s,n,            Set(DB(countQC/${clrID})=${COUNTQC})
exten=>s,n,            GotoIf($[${COUNTQC} = ${LimCall_QC}]?:hangup)


;------------ BL: Send message "toQCBlackList" ------------------------------------------

exten=>s,n,            Verbose(BL:   The callerID=${clrID} is placed to QC Black List)
exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")
exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/toQCBlackList_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/toQCBlackList_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/toQCBlackList_${DES}.txt ${RraDir}/tmp/Input)
exten=>s,n,            Goto(hangup)


;------------ BL: Delete countQC information ---------------------------------------------

exten=>s,n(QC_OK),     Set(COUNTQC=${DB(countQC/${clrID})})
exten=>s,n,            GotoIf($[${ISNULL(${COUNTQC})}]?ending); if the record does not exist then to ending
exten=>s,n,            Verbose(BL:    Delete DB:countQC/${clrID} COUNTQC=${COUNTQC})
exten=>s,n,            NoOp(${DB_DELETE(countQC/${clrID})})
exten=>s,n(ending),    Return


[sub-hangup]

;Informing the caller that the interview is completed.
;Release the phone line.
;

;------------ MS: Send message "hangup" --------------------------------------------------
exten=>s,1,            Verbose(sub-hangup)



exten=>s,n(ending),    Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_14_${LANG}_${SPEAKER}); Your responses have been accepted ...
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_8_${LANG}_${SPEAKER}); Thank you for your cooperation
exten=>s,n,            GotoIf($["${FROM_CC}" = "1"]?cc_end)
exten=>s,n,            Goto(hangup)

exten=>s,n(ending1),   Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_22_${LANG}_${SPEAKER}); You didn`t succesfully complete the int today
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_23_${LANG}_${SPEAKER});Please contact your administrator or manager and advise them you received this message.
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_8_short_${LANG}_${SPEAKER}); : The interview is now concluded
exten=>s,n,            GotoIf($["${FROM_CC}" = "1"]?cc_end)
exten=>s,n,            Goto(hangup)

exten=>s,n(ending2),   Playback(${IntroDir}/${LANG}/${SPEAKER}/Phrase_IRN_7_${LANG}_${SPEAKER}); You did not complete the interview today because the responses you provided could not be processed.
exten=>s,n,            GotoIf($["${FROM_CC}" = "1"]?cc_end)
exten=>s,n,            Goto(hangup)


exten=>s,n(ending3),   Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_26_${LANG}_${SPEAKER}); All telephone lines are currently busy.  Please call back in one to two minutes. Thank you.
exten=>s,n,            Set(HC=17); Busy
exten=>s,n,            Log(NOTICE,  All telephone lines are currently busy.  Please call back in one to two minutes. Thank you. BUSY!)
exten=>s,n,            GotoIf($["${FROM_CC}" = "1"]?cc_end)
exten=>s,n,            Goto(hangup)




exten=>s,n(cc_end),             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_Rejoin_${LANG}_${SPEAKER}); ... to administrator   ->+ Oct 01, 2016


exten=>s,n(hangup),    Verbose()
exten=>s,n,            Verbose( Sent "hangup" mes : ---------------- callNumber=${COUNT}        callerID=${USER})
exten=>s,n,            Wait(1)
;exten=>s,n,            Set(PJSIP_HEADER(add,X-MyHeader)=myvalue)
exten=>s,n,            Hangup(${HC})



[sub-demo-interview]

; Demo interviews with static AC


exten=>s,1,            GotoIf($[$["${DTMF}" = "**"] | $["${DTMF}" = "01"]]?new-sound-test,spanish,1)
exten=>s,n,            GotoIf($[$["${DTMF}" = "*0"] | $["${DTMF}" = "00"]]?new-sound-test,english,1)
exten=>s,n,            GotoIf($["${DTMF}" = ""]?return)


;------------  MS: Calculate Sum of digits -----------------------
exten=>s,n,             Set(SUM=0)
exten=>s,n,             Set(N_DIG=0)
exten=>s,n,             Set(C_NO_1=0)
exten=>s,n,             Set(C_DELAY=0)
exten=>s,n(repDig),     Set(CUR_DIG=${DTMF:${N_DIG}:1})
exten=>s,n,             Set(SUM=$[${SUM}+${CUR_DIG}])
exten=>s,n,             Verbose(N_DIG = ${N_DIG}    DIGIT = ${CUR_DIG}    SUM = ${SUM})
exten=>s,n,             Set(N_DIG=$[${N_DIG}+1])
exten=>s,n,             GotoIf($[${N_DIG}=9]?:repDig)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;998-998-990  ;English Pre-Employment Demo         ;70;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;998-999-099  ;English Casino Demo                 ;71;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-888-777  ;Demo Shipping Interview             ;72;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-889-777  ;Demo PHARMA Interview               ;73;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-998-777  ;Demo Insurance                      ;74;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;988-799-889  ;English Probation Demo              ;75;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-999-886  ;English CoronavirusDemo4            ;76;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-999-887  ;English CoronavirusDemo3            ;77;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;998-998-998  ;Spanish                             ;78;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;998-998-999  ;Arabic                              ;79;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-998-999  ;English Force Protection Demo       ;80;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;999-999-999  ;English GeneralNQ Demo              ;81;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


exten=>s,n,             GotoIf($[${SUM}=70]?sum70);        -----------> SUM is 70               ;English Pre-Employment Demo
exten=>s,n,             GotoIf($[${SUM}=71]?sum71);        -----------> SUM is 71               ;English Casino Demo
exten=>s,n,             GotoIf($[${SUM}=72]?sum72);        -----------> SUM is 72               ;Demo Shipping Interview
exten=>s,n,             GotoIf($[${SUM}=73]?sum73);        -----------> SUM is 73               ;Demo PHARMA Interview
exten=>s,n,             GotoIf($[${SUM}=74]?sum74);        -----------> SUM is 74               ;Demo Insurance
exten=>s,n,             GotoIf($[${SUM}=75]?sum75);        -----------> SUM is 75               ;English Probation Demo
exten=>s,n,             GotoIf($[${SUM}=76]?sum76);        -----------> SUM is 76               ;English CoronavirusDemo 4 questions
exten=>s,n,             GotoIf($[${SUM}=77]?sum77);        -----------> SUM is 77               ;English CoronavirusDemo 3 questions
exten=>s,n,             GotoIf($[${SUM}=78]?sum78);        -----------> SUM is 78               ;Spanish
exten=>s,n,             GotoIf($[${SUM}=79]?sum79);        -----------> SUM is 79               ;Arabic Q_ArabicDemo_03_Ara
exten=>s,n,             GotoIf($[${SUM}=80]?sum80);        -----------> SUM is 80               ;English Force Protection Demo
exten=>s,n,             GotoIf($[${SUM}=81]?sum81:return); -----------> SUM is 81               ;English GeneralNQ Demo

exten=>s,n(sum70),      Set(INTV_LANG=Eng)
;exten=>s,n,            Set(DEMOFILE=${QuestDir}/77_Full) ;temporary for TTS testing
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_forCC_07_${INTV_LANG}) ;original
exten=>s,n,             Goto(accept)

exten=>s,n(sum71),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_CasinoDemo_04_Eng)
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum72),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_CEDemo_07_Eng);
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum73),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_PHARMADemo_03_Eng);
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum74),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_InsuranceDemo_03_Eng);
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum75),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_ProbDemo_07_${INTV_LANG})
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum76),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_CoronavirusDemo_04_${INTV_LANG})
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum77),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_CoronavirusDemo_03_${INTV_LANG})
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)


exten=>s,n(sum78),      Set(INTV_LANG=Spa)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_SpanishDemo_06_${INTV_LANG})
exten=>s,n,             Set(INT_SPEAKER=Susa);
exten=>s,n,             Goto(accept)

exten=>s,n(sum79),      Set(INTV_LANG=Ara)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_ArabicDemo_03_Ara)
exten=>s,n,             Set(INT_SPEAKER=Arab);
exten=>s,n,             Goto(accept)


exten=>s,n(sum80),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_MilitaryDemo_06_${INTV_LANG})
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)

exten=>s,n(sum81),      Set(INTV_LANG=Eng)
exten=>s,n,             Set(DEMOFILE=${QuestDir}/Q_GeneralNQDemo_08_${INTV_LANG})
exten=>s,n,             Set(INT_SPEAKER=Troy);
exten=>s,n,             Goto(accept)




exten=>s,n(accept),     Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_9_${LANG}_${SPEAKER}); Your access code was accepted
exten=>s,n,             GotoIf($["${FROM_CC}"="1"]?rep_inv40)

exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_2_${LANG}_${SPEAKER}); Press one when you will be ready to start interview

exten=>s,n(rep_inv40),  WaitExten(60); ->+ Apr 02, 2017
exten=>s,n,             Set(C_DELAY=$[${C_DELAY} + 1])
exten=>s,n,             Verbose(Long Delay : attempt #${C_DELAY}. Delay of pressing 1 is more than 60 seconds)
exten=>s,n,             GotoIf($[${C_DELAY} < 2]?rep_inv40:end_AC);  ->+ Oct 03, 2016



exten=>s,n(int42),      Wait(1)
exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_3-1_short_${LANG}_${SPEAKER})
exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_3-3_${LANG}_${SPEAKER})
exten=>s,n,             Wait(1)
exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/RRA_Phrase_4_${LANG}_${SPEAKER})

exten=>s,n,             Wait(2)
exten=>s,n,             Playback(${DEMOFILE})
exten=>s,n,             Wait(2)


exten=>s,n,             Goto(sub-hangup,s,1)

exten=>s,n(return),     Return()


;----------- MS: The key 1 was pressed -----------------

exten=>1,1,               Verbose(It was pressed key 1)
exten=>1,n,               Goto(s,int42)

;------------ The other key was pressed (not 1) -----------------

exten=>i,1,               Verbose(It was pressed key no 1)
exten=>i,n(contB),        Set(C_NO_1=$[${C_NO_1} + 1])
exten=>i,n,               Verbose(Other key : attempt #${C_NO_1}. It was pressed other key or no pressing)
exten=>i,n(good_bye),     GotoIf($[${C_NO_1}<3]?$s,rep_inv40:s,end_AC)

;----------- MS: Time out: no key was pressed -----------------

exten=>t,1,               Verbose(No key was pressed for defined time )
exten=>t,n,               Goto(i,contB)



[handler]

;Hangup handlers are subroutines attached to a channel that will execute when that channel hangs up.
;Informs the CallViewer that the conversation/call is over.


exten => s,1,NoOp()
 same => n,NoOp(HANGUPCAUSE is ${HANGUPCAUSE})
 same => n,NoOp()
 ;same => n,Log(NOTICE, This channel is: ${CHANNEL(state)})
 ;same => n,System(/usr/bin/opusenc ${FULL_AUDIO}.wav ${FULL_AUDIO}.opus --comment 'AC=${DTMF}' --comment 'IRN=${CC}')
 ;same => n,System(/usr/bin/oggenc ${FULL_AUDIO}.wav -c 'AC=${DTMF}' -c 'IRN=${CC}')
  same => n,System(/usr/bin/lame --preset standard --tc '[{AC:${DTMF}}, {IRN:${CC}}]' --add-id3v2 ${FULL_AUDIO}.wav ${FULL_AUDIO}.mp3 && rm -f ${FULL_AUDIO}.wav)

 same => n,Verbose(0, Channels with hangup cause information: ${HANGUPCAUSE})
 same => n,System(rm -f ${FILE_NAME}-out.wav)


 same => n,Set(msg_time= \n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n)
 ;same => n,Set(JSON_hangup= "{\n\\"call_duration\\": ${CDR(billsec)},\n\\"hangup_code\\": ${HANGUPCAUSE},${msg_time}}")

 same => n,Set(JSON_hangup= "{\n\\"call_duration\\": ${CDR(billsec)},\n\\"hangup_code\\": ${HANGUPCAUSE},\n\\"quest_set\\":${QSandNquest},${msg_time}}")
 same => n,System(echo -e ${JSON_hangup}  > ${RraDir}/tmp/Input_Sync/hangup_${DES}.txt)
 same => n,System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/hangup_${DES}.txt)
 same => n,System(mv ${RraDir}/tmp/Input_Sync/hangup_${DES}.txt ${RraDir}/tmp/Input)
 same => n,Set(RTPQ=${CHANNEL(rtcp,all)})

 same => n,Return()


[new-sound-test]

;Special SoundTestContext to check client side equipment/phoneline

;------------ MS: Setting of call counter (from 1 to 99999) --------------------
exten=>**,1,            Set(from=${EXTEN})              ;Old version
exten=>**,n,            Set(LANG=Spa); New version
exten=>**,n,            Set(SPEAKER=Susa);
exten=>**,n,            Goto(s,span)

exten=>01,1,            Set(from=${EXTEN})
exten=>01,n,            Set(LANG=Spa); New version
exten=>01,n,            Set(SPEAKER=Susa);
exten=>01,n,            Goto(s,span)

exten=>*0,1,            Set(from=${EXTEN})              ;Old version
exten=>*0,n,            Set(LANG=Eng); New version
exten=>*0,n,            Set(SPEAKER=Troy);
exten=>*0,n,            Goto(s,engl)

exten=>00,1,            Set(from=${EXTEN})
exten=>00,n,            Set(LANG=Eng); New version
exten=>00,n,            Set(SPEAKER=Troy);
exten=>00,n,            Goto(s,engl)

exten=>spanish,1,      Set(LANG=Spa)
exten=>spanish,n,      Set(SPEAKER=Susa);
exten=>spanish,n,      Goto(s,yar)

exten=>english,1,      Set(LANG=Eng)
exten=>english,n,      Set(SPEAKER=Troy);
exten=>english,n,      Goto(s,yar)

exten=>s,1(span),      Set(LANG=Spa)
exten=>s,n,            Goto(ctn)
exten=>s,n(engl),      Set(LANG=Eng)



exten=>s,n(ctn),       GotoIf($[${ISNULL(${COUNT})}]?:cont4);
exten=>s,n,            Set(COUNT=${DB(control/count)})
exten=>s,n,            GotoIf($[${ISNULL(${COUNT})}]?:cont1); if the record exists, then to cont1
exten=>s,n,            Set(DB(control/count)=1)
exten=>s,n,            Goto(2)

exten=>s,n(cont1),     Set(COUNT=$[${COUNT}+1])
exten=>s,n,            GotoIf($[${COUNT} = 99999]?:cont2)
exten=>s,n,            Set(COUNT=1)
exten=>s,n(cont2),     Set(DB(control/count)=${COUNT})

;------------ MS: There is a call: send message "call" --------------------------

exten=>s,n(cont4),     Set(USER=${CALLERID(num)})

exten=>s,n,            Verbose()
exten=>s,n,            Verbose(------------------------------- N E W  C A L L ---------------------------------------)
exten=>s,n,            Verbose(          There is a call : callNumber=${COUNT}   callerID=${USER})
exten=>s,n,            Set(DES=${COUNT}_${USER})
exten=>s,n,            Set(CHANNEL(hangup_handler_push)=handler,s,1)
exten=>s,n,            Set(msg_time= \n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n)
exten=>s,n,            Set(JSON_call= "{\n\\"dial_number\\": \\"${from}\\",\n\\"provider\\": \\"${PROVIDER}\\",${msg_time}}")
exten=>s,n,            System(echo -e ${JSON_call}  > ${RraDir}/tmp/Input_Sync/call_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/call_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/call_${DES}.txt ${RraDir}/tmp/Input)

exten=>s,n,            Set(from=${EXTEN})
exten=>s,n,            Verbose(          Sent Call mes   : callNumber=${COUNT}   callerID=${USER}   Lang=${LANG})
exten=>s,n,            Wait(1)

;------------ MS: Send message "answer" -----------------------------------------

exten=>s,n,            Answer()
exten=>s,n,            Wait(2)
exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")
exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input/answer_${DES}.txt)
exten=>s,n,            Verbose(          Sent Answer mes : callNumber=${COUNT}   callerID=${USER})
exten=>s,n(yar),       Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_YouAreReachedRRA_${LANG}_${SPEAKER})

;------------ MS: Invite to interview  --------------------------------------------

exten=>s,n,             Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_PleaseRespond_${LANG}_${SPEAKER})
;------------ MS: Send message "beginSoundTest" and record the interview ----------------

exten => s,n,           GotoIf($["${LANG}"= "Spa"]?spa)
exten => s,n,           GotoIf($["${LANG}"= "Eng"]?eng:hangup)

exten => s,n(eng),      SET(din_file=I_SoundTest_06_Eng_Troy)
exten => s,n,           SET(speaker=Troy)
exten => s,n,           Verbose(Text = ${ALLQ})
exten => s,n,           Goto(ent_point)

exten => s,n(spa),      SET(din_file=I_SoundTest_06_Spa_Susa)
exten => s,n,           SET(speaker=Susa)
exten => s,n,           Verbose(Text = ${ALLQ})

exten => s,n(ent_point),Verbose(Enter Point)
exten => s,n,           SET(ALLQ=${FILE(${Intrws}/${din_file}.din)});   list of questionIDs as one string
exten => s,n,           SET(NUMQUEST=6)
exten => s,n,           Set(INTV_LANG=${LANG})
exten => s,n,           Set(ATTEMPT=0)

;------------ MS: Cycle of recording answers -------------------------------------
exten => s,n(repeat),   SET(IN=0);                                                              pointer of the cycle
exten => s,n,           SET(DURATION=0)
exten => s,n(ct),       SET(NS=$[${IN}+1]);                                             answer number (beginning from 1)
exten => s,n,           Verbose(IN=${IN}  NS=${NS})
exten => s,n,           Verbose(Play question ${NS})
exten => s,n,           SET(FQ=${CUT(ALLQ,-,${NS})});                           questionID file
exten => s,n,           Verbose(Play question Q_${FQ}_${INTV_LANG}.wav)
exten => s,n,           Playback(${Qsts}/Q_${FQ:0:4}_${INTV_LANG}_${speaker})

exten => s,n,           GotoIf($["${REC}"="0"]?:cntn)
exten => s,n,           Wait(5.0)

exten => s,n,           Goto(check)

exten => s, n(cntn),    SET(SIGN=${FQ:-1});                                             special sign: N/R/L - neutral, relevant, long question
exten => s, n,          GotoIf($[${SIGN}=L]?:s3)
exten => s, n,          Set(DUR=10.0);                                                  duration of record for answer Long question (Your name?)
exten => s, n,          Goto(rec5)
exten => s, n(s3),      Set(DUR=5.0);                                                   duration for usual answer
exten => s, n(rec5),    GotoIf($[${IN}=0]?:ju1)
exten => s, n,          Set(A_FILE=${WavDir}/A_${INT_FNAME})
exten => s, n,          Verbose(Answer file = ${A_FILE})
exten => s, n,          Verbose(Current time = ${STRFTIME(${EPOCH},America/New_York,%d%m%Y_%H%M%S)})

;------------------ Start of intervew ---------------------------
exten => s,n,          Set(FILE_NAME=${WavDir}/A_${DES}_SoundTest_06_${LANG}_${STRFTIME(${EPOCH},America/New_York,%d%m%Y_%H%M%S)})
exten=>s,n,            Set(msg_time= \n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n)
exten=>s,n,            Set(JSON_call= "{\n\\"lang\\": \\"${LANG}\\",${msg_time}}")
exten=>s,n,            System(echo -e ${JSON_call}  > ${RraDir}/tmp/Input_Sync/beginSoundTest_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/beginSoundTest_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/beginSoundTest_${DES}.txt ${RraDir}/tmp/Input)



exten => s,n,          Monitor(wav,${FILE_NAME},o)
exten => s,n,          Goto(ju2)
exten => s,n(ju1),     Verbose(Current time = ${STRFTIME(${EPOCH},America/New_York,%d%m%Y_%H%M%S)})
exten => s,n,          UnPauseMonitor()
exten => s,n(ju2),     Wait(${DUR})
exten => s,n,          PauseMonitor()
exten => s,n,          SET(DURATION=$[${DURATION}+${DUR}])
exten => s,n,          Verbose(Current Duration = ${DURATION})
exten => s,n(check),   SET(IN=$[${IN}+1])
exten => s,n,          GotoIf($[${IN}=${NUMQUEST}]?:ct);                check a condition of cycle end
exten => s,n,              GotoIf($["${REC}"="0"]?return)
;----------------- Finish of interview --------------------------

exten=>s,n,            StopMonitor()
exten=>s,n,            Wait(1); for closing the file
exten=>s,n,            System(chmod -c 0777 ${FILE_NAME}*.wav)
exten=>s,n,            Verbose(The interview is completed : callNumber=${COUNT}   callerID=${USER})

;------------ MS:  Playback the record --------------------------------------------------
exten=>s,n,            Verbose(                Listening of the record  : ${FILE_NAME})
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_ListenYourResponses_${LANG}_${SPEAKER})
exten=>s,n,            Playback(${FILE_NAME}-in)

;------------ MS: Send message "endSoundTest" --------------------------------------
exten=>s,n,            Set(msg_time= "{\n\\"date\\": \\"${STRFTIME(${EPOCH},America/New_York,%F)}\\",\n\\"time\\": \\"${STRFTIME(${EPOCH},America/New_York,%T)}\\",\n\\"utc_offset\\": \\"${STRFTIME(${EPOCH},America/New_York,%z):0:3}:00\\"\n}")

exten=>s,n,            System(echo -e ${msg_time}  > ${RraDir}/tmp/Input_Sync/endSoundTest_${DES}.txt)
exten=>s,n,            System(chmod -c 0777 ${RraDir}/tmp/Input_Sync/endSoundTest_${DES}.txt)
exten=>s,n,            System(mv ${RraDir}/tmp/Input_Sync/endSoundTest_${DES}.txt ${RraDir}/tmp/Input)
exten=>s,n,            Verbose(   Sent "endSoundTest" message : callNumber=${COUNT}   callerID=${USER})
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_PleaseWaitResponse_${LANG}_${SPEAKER})
exten=>s,n,            Wait(2)

;------------ MS: Analysis of quality control -----------------------------------

exten=>s,n,            Set(QUAL=${FILE(${RraDir}/tmp/Output/endSoundTest_${DES}.txt,0,2)})
exten=>s,n,            Verbose(      Result of QuaControl : Quality = ${QUAL}     callNumber=${COUNT}        callerID=${USER})
exten=>s,n,            GotoIf($["${QUAL}"=""]?tech_prob)
exten=>s,n,            GotoIf($[${QUAL} = OK]?QC_OK:QC_NO);
;exten=>s,n,            GotoIf($[${QUAL} = NO]?QC_NO);

exten=>s,n(tech_prob), Playback(${IntroDir}/${LANG}/${SPEAKER}/Phrase_IRN_8_${LANG}_${SPEAKER}); The system requires additional technical approval to conduct this interview.  Please contact your interview administrator or manager to advise them you received this message.
exten=>s,n,            Goto(sub-hangup,s,hangup)

exten=>s,n(QC_NO),     Set(ATTEMPT=$[${ATTEMPT} + 1])
exten=>s,n,            GotoIf($[${ATTEMPT} = 2]?finish)
exten=>s,n,            Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_YourResponsesNotAccepted_att1_${LANG}_${SPEAKER})
exten=>s,n,            Goto(repeat)

exten=>s,n(QC_OK),     Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_YourResponsesWereAccepted_${LANG}_${SPEAKER})
exten=>s,n,            Goto(hangup)

exten=>s,n(finish),    Playback(${IntroDir}/${LANG}/${SPEAKER}/ST_YourResponsesNotAccepted_att2_${LANG}_${SPEAKER})

exten=>s,n,            Verbose(          Sent "hangup" mes : ---------------- callNumber=${COUNT}        callerID=${USER})
exten=>s,n(hangup),    Hangup()





[internal]


;=================================================================================================================== 97000


;-------------------------------------------------------------------------------------------------;
;                                                                                                 ;
;                         =========================================                               ;
;=========================[]          TEST MASTER EDITOR         []===============================;
;                         []         E N G L I S H   IVR         []                               ;
;                         =========================================                               ;
;                                                                                                 ;
;-------------------------------------------------------------------------------------------------;

;Gosub(context,extension,priority)
;Context for startd interview

exten=>  888,1,Set(ATT_ACCESS=1)
exten => 888,n,Gosub(sub-pre-answer,s,1)
exten => 888,n,Gosub(sub-answer,s,1)
exten => 888,n,Gosub(sub-inviteIntv,s,1)
exten => 888,n,Set(REC=1)
exten => 888,n,Set(LANG=${INTV_LANG})
exten => 888,n,Set(SPEAKER=${INT_SPEAKER})
exten => 888,n,Gosub(sub-interview-cc,s,1)
exten => 888,n,Gosub(sub-post-interwiev,s,1)
exten => 888,n,Set(REC=1)
;exten => 888,n,Set(LANG=${INTV_LANG})
exten => 888,n,Gosub(sub-interview-cc,s,st)
exten => 888,n,Gosub(sub-post-interwiev,s,1)
exten => 888,n,Gosub(sub-hangup,s,1)





;====================================================================================================





[default]
include=>from-pstn
;include=>iunlim
;include=>from-cc
